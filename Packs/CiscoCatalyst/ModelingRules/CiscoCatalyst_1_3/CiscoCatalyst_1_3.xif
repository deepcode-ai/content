[MODEL: dataset="cisco_catalyst_raw"]
/*  Cisco System Log Message General Format: 
    https://www.cisco.com/c/en/us/td/docs/routers/access/wireless/software/guide/SysMsgLogging.html#wp1054470) */
alter // extract oob parsed fields
    device_ip = parsed_fields -> device_ip, 
    event_id = parsed_fields -> event_id,
    event_name = uppercase(parsed_fields -> mnemonic), 
    facility = uppercase(parsed_fields -> facility), 
    msg = parsed_fields -> description,
    seq_number = parsed_fields -> sequence_number,
    severity = parsed_fields -> severity
| alter // extract dynamic fields from the syslog message description 
    change_state = arrayindex(regextract(msg, "\,\s(changed\sstate\sto[a-zA-Z\s]+)"), 0),
    client_mac_address = coalesce(
        arrayindex(regextract(msg, "from MAC address\s+([\da-fA-F]{6}\-[\da-fA-F]{6})"), 0),
        arrayindex(regextract(msg, "client\s*\(((?:[\da-fA-F]{4}\.){2}[\da-fA-F]{4})\)"), 0),
        arrayindex(regextract(msg, "(?:Host|Client MAC|sourced by)\s+((?:[\da-fA-F]{4}\.){2}[\da-fA-F]{4})"), 0)),
    device_hostname = arrayindex(regextract(_raw_log ,"\<\d+\>\d+\:\s([\w+\-\_]+)\:\s\d+\:"), 0),
    device_product_id = arrayindex(regextract(msg ,"\[PID\:([^\,]+)\,"), 0), 
    device_serial_number = arrayindex(regextract(msg , ",SN\:([\w\-]+)"), 0),
    interface = coalesce(
        arrayindex(regextract(msg ,"Interface\s([^\/]+\/\d+\/*\d*)"), 0),
        arrayindex(regextract(msg ,"interface\sname\s([^\/]+\/\d+\/\d+)"), 0),
        arrayindex(regextract(msg , "Interface\s([\w\-]+)"), 0),
        arrayindex(regextract(msg , "on interface\s+(\S+)\s+by"), 0),
        arrayindex(regextract(msg , "(?:on|port|Unblocking|Blocking)\s+(\w+\/\w+\/\w+)"), 0),
        arrayindex(regextract(msg , "^(\w+\/\w+\/\w+):"), 0)),
    outcome_reason = coalesce(
        arrayindex(regextract(msg, "\sreason:\s*(.+?)\."), 0), 
        arrayindex(regextract(msg, "with reason\s*\(([^\)]+)\)"), 0),
        arrayindex(regextract(msg, "\[Reason:\s*([^\]]+)\]"), 0)),
    process_name = coalesce(
        arrayindex(regextract(msg ,"by\sprocess\s(.+?)\s+(?:Process|Policy\smanager)"), 0),
        arrayindex(regextract(msg ,"process\s*\=\s*([^\.]+)\."), 0)),
    server_ipv4 = arrayindex(regextract(msg, "[Ss]erver(?:\s+not\s+found)?(?:\s+at)?\s+((?:\d{1,3}\.){3}\d{1,3})"), 0),
    server_name = arrayindex(regextract(msg, "Server\s+([\w\-]+)\s+is"), 0),
    session_id = coalesce(
        arrayindex(regextract(msg, "AuditSessionID (\w+)"), 0),
        arrayindex(regextract(msg, "session (\w+)\("), 0)),
    source_ipv4 = coalesce(
        arrayindex(regextract(msg , "from\s+((?:\d{1,3}\.){3}\d{1,3})"), 0),
        arrayindex(regextract(msg , "from\s+host\s+((?:\d{1,3}\.){3}\d{1,3})"), 0),
        arrayindex(regextract(msg , "list\s\d+\spermitted\s((?:\d{1,3}\.){3}\d{1,3})"), 0),
        arrayindex(regextract(msg ,"\[Source\:\s((?:\d{1,3}\.){3}\d{1,3})\]"), 0),
        arrayindex(regextract(msg ,"session\s\d+\(((?:\d{1,3}\.){3}\d{1,3})\)"), 0),
        arrayindex(regextract(msg ,"connection\sfrom\s((?:\d{1,3}\.){3}\d{1,3})"), 0),
        arrayindex(regextract(msg ,"to\shost\s((?:\d{1,3}\.){3}\d{1,3})\s"), 0),
        arrayindex(regextract(msg ,"address\s((?:\d{1,3}\.){3}\d{1,3})\son"), 0),
        arrayindex(regextract(msg ,"neighbor\s((?:\d{1,3}\.){3}\d{1,3})"), 0),
        arrayindex(regextract(msg , "on\s+\w+\s*\(((?:\d{1,3}\.){3}\d{1,3})"), 0),
        arrayindex(regextract(msg ,"\(((?:\d{1,3}\.){3}\d{1,3})\)\)\,\suser"), 0)),
    target_ipv4 = arrayindex(regextract(msg ,"to\shost\s((?:\d{1,3}\.){3}\d{1,3})\s"), 0),
    target_port = coalesce(
        arrayindex(regextract(msg ,"\[localport\:\s(\d+)\]"), 0), 
        arrayindex(regextract(msg ,"to\shost\s\d+\.\d+\.\d+\.\d+\sport\s(\d+)"), 0)),
    username = coalesce(
        arrayindex(regextract(msg ,"user\s+name\s*:\s*([\w\-]+)"), 0),
        arrayindex(regextract(msg ,"User\s+\'([^\']+)\'\s+\w+"), 0),
        arrayindex(regextract(msg ,"User\s+(\S+)\s+has"), 0),
        arrayindex(regextract(msg ,"\[user\:\s([^\]]+)\]"), 0),
        arrayindex(regextract(msg ,"\:\sUser\s(\S+)\s"), 0),
        arrayindex(regextract(msg ,"Username:\s*()"), 0),
        arrayindex(regextract(msg ,"by\s+(\S+)\s+on\s+"), 0),
        arrayindex(regextract(msg ,"\(\d+\.\d+\.\d+\.\d+\)\)\,\suser\s(\S+)"), 0)),
    vlan = arrayindex(regextract(msg ,"(?i)vlan\s*0*(\d+)"), 0)
| alter // post-extraction formatting 
    seq_number = replex(seq_number, "^0+", ""),
    client_mac_formatted = arraystring(regextract(client_mac_address, "[\da-fA-F]{2}"), ":")
| alter // XDM mappings
    xdm.alert.severity = severity,
    xdm.event.description = msg,
    xdm.event.id = coalesce(event_id, seq_number),
    xdm.event.log_level = if(severity = "0", XDM_CONST.LOG_LEVEL_EMERGENCY , severity = "1", XDM_CONST.LOG_LEVEL_ALERT , severity = "2", XDM_CONST.LOG_LEVEL_CRITICAL, severity = "3", XDM_CONST.LOG_LEVEL_ERROR, severity = "4", XDM_CONST.LOG_LEVEL_WARNING, severity = "5", XDM_CONST.LOG_LEVEL_NOTICE, severity = "6", XDM_CONST.LOG_LEVEL_INFORMATIONAL, severity = "7", XDM_CONST.LOG_LEVEL_DEBUG, severity),
    xdm.event.outcome = if(event_name contains "SUCCESS" or msg ~= "(?i)SUCCESS", XDM_CONST.OUTCOME_SUCCESS, event_name ~= "FAIL|ERROR" or msg ~= "(?i)FAIL|FAULT|INVALID|ERROR|UNABLE|CAN\'T REACH|NOT FOUND|VIOLATION", XDM_CONST.OUTCOME_FAILED),
    xdm.event.outcome_reason = outcome_reason,
    xdm.event.type = if( // map event type for non-standard message log formats based on their event ids
        event_name = "FAIL" and msg ~= "(?i)Authorization failed", "AUTHORIZATION_FAILED",
        event_name = "FAIL" and msg ~= "(?i)Authentication failed", "AUTHENTICATION_FAILED",
        facility = "AUTH" and event_id = "03362", "SSH_USER_LOGIN",
        facility = "AUTH" and event_id = "03363", "SSH_USER_LOGOUT",
        facility = "AUTH" and event_id = "00419", "SSH_INVALID_CREDENTIALS",
        facility = "SSH" and event_id = "00641", "SSH_SESSION_ABORTED",
        facility = "JOB" and event_id = "04611", "JOB_SCHEDULER_ENABLED",
        facility = "STP" and event_id = "00839", "STP_CST_ROOT_CHANGED",
        facility = "LLDP" and event_id = "00828", "PORT_VLAN_ID_MISMATCH",
        facility = "802.1X" and event_id = "00428", "AUTH-FAILURES",
        facility = "SNTP" and event_id = "00413", "UPDATED_TIME_FROM_SERVER",
        facility = "SNTP" and event_id = "00414", "SERVER_UNREACHABLE",
        facility = "SNTP" and event_id = "02631", "SERVER_NOT_FOUND",
        facility = "PORTS" and event_id = "00076", "PORT_ONLINE",
        facility = "PORTS" and event_id = "00077", "PORT_OFFLINE",
        facility = "PORTS" and event_id = "00435", "PORT_BLOCKED",
        facility = "SNMP" and event_id = "00236", "SECURITY_ACCESS_VIOLATION",
        facility = "RADIUS" and event_id = "00421", "SERVER_UNREACHABLE",
        facility = "RADIUS" and event_id = "05845", "SERVER_REACHABLE",
        facility = "ACTIVATE" and event_id = "05220", "SERVER_ADDRESS_UNRESOLVABLE",
        facility = "ACTIVATE" and event_id = "05625", "TIME_SYNCHRONIZATION_ATTEMPT",
        facility = "ACTIVATE" and event_id = "05626", "TIME_SYNC_WITH_SERVER_FAILED",
        facility = "ACTIVATE" and event_id = "05227", "TIME_SYNCHRONIZATION_FAILED",
        facility = "ADDRMGR" and event_id = "00288", "FRAME_RECEIVED",
        coalesce(event_name, facility)), // default fallback event type mapping for non-standard logs 
    xdm.network.session_id = session_id,
    xdm.observer.action = change_state,
    xdm.observer.name = device_hostname,
    xdm.observer.type = facility,
    xdm.observer.unique_identifier = coalesce(device_serial_number, device_hostname, device_ip),
    xdm.session_context_id = session_id,
    xdm.source.host.device_id = coalesce(device_serial_number, device_hostname),
    xdm.source.host.device_model = device_product_id,
    xdm.source.host.hardware_uuid = device_serial_number,
    xdm.source.host.mac_addresses = if(client_mac_formatted != null, arraycreate(client_mac_formatted)),
    xdm.source.ipv4 = coalesce(source_ipv4, device_ip, _final_reporting_device_ip),
    xdm.source.process.name = process_name,
    xdm.source.user.username = username,
    xdm.source.vlan = to_integer(vlan),
    xdm.target.host.hostname = server_name,
    xdm.target.interface = interface,
    xdm.target.ipv4 = coalesce(server_ipv4, target_ipv4),
    xdm.target.port = to_integer(target_port);